# 网络
## 1、网络基础知识
OSI网络模型VS TCP/IP模型


## 2、网络协议
### 2.1 IP协议

### 2.2 TCP协议
TCP 首部

源端口 16位  | 目的端口 16位
序号位  32位
确认序号 32位
首部长度4位   保留3位 9位标志位   16位窗口位
16位首部校验和   16位 紧急指针
选项位   
数据
- 常见标志
- ACK
- SYN
- FIN
- PUSH
- USG
- RSET 
- URG 紧急指针位  

### 2.2.1 TCP协议之三次握手

### 2.2.1 TCP协议之四次挥手




### 2.3 UDP协议



## 3、网络实践与实际应用
### 3.1 NAT


###  3.2 LVS 

1. LVS常见的三种模式和FULLNAT 

- NAT  DNAT  可以支持端口的转换
- TUNEL
- DR 
- FULLNAT 
  
2. 常见的调度算法：
- 轮询 LRR   roundrobin 轮询 RS分别被调度，当RS配置有差别时不推荐
- 加权轮训 WRR  Weighted RR，加权轮询根据RS的配置进行加权调度，性能差的RS被调度的次数少


- 源地址hash SH    Source Hashing，实现session sticky，源IP地址hash；将来自于同一个IP地址的请求始终发往 第一次挑中的RS，从而实现会话绑定
  
- 目的地址hash DH  Destination Hashing；目标地址哈希，第一次轮询调度至RS，后续将发往同一个目标地址的请 求始终转发至第一次挑中的RS，典型使用场景是正向代理缓存场景中的负载均衡，如：宽带运营商
- 最少连接 LC  least connections（最少链接算法）适用于长连接应用Overhead（负载值）=activeconns（活动链接数） x 256+ inactiveconns（非活 动链接数）
- 
- 加权最少链接 WLC  默认调度方法Overhead=(activeconns x 256+inactiveconns)/weight
- 
- 动态调度算法  主要根据RS当前的负载状态及调度算法进行调度Overhead=value较小的RS会被调度
- SEQ  SED：Shortest Expection Delay（最短期望延迟算法）
        初始连接高权重优先Overhead=(activeconns+1+inactiveconns) x 256/weight

        但是，当node1的权重为1，node2的权重为10，经过运算前几次的调度都会被node2承接
 - NQ：Never Queue（最少队列算法）如果有RS的连接数为0，就直接分配过去。第一轮均匀分配，后续SED
 - LBLC：Locality-Based LC（基于局部的最少连接算法）动态的DH算法，使用场景：根据负载状态实现正向代理
 - LBLCR：LBLC with Replication（带复制的基于局部的最少连接算法）带复制功能的LBLC，解决LBLC负载不均衡问题，从负载重的复制 到负载轻的RS
 - 1FO(Weighted Fai Over)调度算法
        在此FO算法中，遍历虚拟服务所关联的真实服务器链表，找到还未过载(未设置IP_VS_DEST_F OVERLOAD标志)的且权重最高的真实服务器，进行调度

        当服务器承接大量链接，我们可以对此服务器进行过载标记（IP_VS_DEST_F OVERLOAD），那么vs调度 器就不会把链接调度到有过载标记的主机中。
- OVF (Overflow-connection)调度算法
        基于真实服务器的活动连接数量和权重值实现。将新连接调度到权重值最高的真实服务器，直到其活动 连接数量超过权重值，之后调度到下一个权重值最高的真实服务器,在此OVF算法中，遍历虚拟服务相关联的真实服务器链表，找到权重值最高的可用真实服务器。一个可用的真实服务器需要同时满足以下条件：

        1.未过载(未设置IP_VS_DEST_F OVERLOAD标志)

        2.真实服务器当前的活动连接数量小于其权重值

        3.其权重值不为零
    Linux 查看其支持的调度算法的方式
    ```bash
  cd /boot/  cat config-4.19.177
   # IPVS transport protocol load balancing support


### 3.3 IPSEC VPN 

## 4、Linux 网络协议栈


## 5、虚拟化网络

### 5.1 Bridge 

###  5.2  Virtual  Ethernet (vthe peer)


## 6 容器网络和k8s网络
### 6.1 docker网络
docker 的四种网络模型
- None 用 -net=none 指定
- Host 用 -net=host 制定
- Container   用 -net=container:NAME_or_ID 指定
- Bridge  默认的的网络模式  docker0 网桥  
  
### 6.2 网络命名空间 NameSpace 



### 6.2 pod网络模型
- 所有的容器都可以再不用NAT的方式下同别的容器通信
- 所有的节点都可以在不用NAT的方式下同所有的容器通信，反之亦然
- 容器的地址和别人看到的是同一个地址
### 6.3 k8s CNI


